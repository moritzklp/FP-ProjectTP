IN FUNCTIONAL PROGRAMMING, MONADS ARE A WAY TO STRUCTURE COMPUTATIONS AS A SEQUENCE OF STEPS, WHERE EACH STEP NOT ONLY PRODUCES A VALUE BUT ALSO SOME EXTRA INFORMATION ABOUT THE COMPUTATION, SUCH AS A POTENTIAL FAILURE, NON-DETERMINISM, OR SIDE EFFECT. MORE FORMALLY, A MONAD IS A TYPE CONSTRUCTOR M EQUIPPED WITH TWO OPERATIONS, WHICH LIFTS A VALUE INTO THE MONADIC CONTEXT, AND WHICH CHAINS MONADIC COMPUTATIONS. IN SIMPLER TERMS, MONADS CAN BE THOUGHT OF AS INTERFACES IMPLEMENTED ON TYPE CONSTRUCTORS, THAT ALLOW FOR FUNCTIONS TO ABSTRACT OVER VARIOUS TYPE CONSTRUCTOR VARIANTS THAT IMPLEMENT MONAD (E.G. OPTION, LIST, ETC.).

BOTH THE CONCEPT OF A MONAD AND THE TERM ORIGINALLY COME FROM CATEGORY THEORY, WHERE A MONAD IS DEFINED AS AN ENDOFUNCTOR WITH ADDITIONAL STRUCTURE. RESEARCH BEGINNING IN THE LATE 1980S AND EARLY 1990S ESTABLISHED THAT MONADS COULD BRING SEEMINGLY DISPARATE COMPUTER-SCIENCE PROBLEMS UNDER A UNIFIED, FUNCTIONAL MODEL. CATEGORY THEORY ALSO PROVIDES A FEW FORMAL REQUIREMENTS, KNOWN AS THE MONAD LAWS, WHICH SHOULD BE SATISFIED BY ANY MONAD AND CAN BE USED TO VERIFY MONADIC CODE.

SINCE MONADS MAKE SEMANTICS EXPLICIT FOR A KIND OF COMPUTATION, THEY CAN ALSO BE USED TO IMPLEMENT CONVENIENT LANGUAGE FEATURES. SOME LANGUAGES, SUCH AS HASKELL, EVEN OFFER PRE-BUILT DEFINITIONS IN THEIR CORE LIBRARIES FOR THE GENERAL MONAD STRUCTURE AND COMMON INSTANCES.